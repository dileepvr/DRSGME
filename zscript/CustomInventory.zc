class Z_NashMove : CustomInventory
{
//===========================================================================
//
// nashmove.pk3
//
// Less slippery player movement. Works for any player class.
//
// Originally written by Nash Muhandes.
//
//
// Feel free to use this in your mods. You don't have to ask my permission!
//
//===========================================================================

	int old_forwardmove, old_sidemove;
	
	Default
	{
		Inventory.MaxAmount 1;
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNTOSSABLE
		+INVENTORY.UNCLEARABLE
		+INVENTORY.AUTOACTIVATE
	}

	// How much to reduce the slippery movement.
	// Lower number = less slippery.
	cvar DECEL_MULT;
	cvar isoctrltype;

	override void PostBeginPlay()
	{
	        old_forwardmove = 0;
			old_sidemove = 0;
	        if (Owner && Owner is "PlayerPawn")
			{
				DECEL_MULT = CVar.GetCVar("DecelMult", Owner.player);
				isoctrltype = CVar.GetCVar("IsoControlType", Owner.player);
			}
	}
	//===========================================================================
	//
	//
	//
	//===========================================================================

	bool bIsOnFloor(void)
	{
		return (Owner.Pos.Z == Owner.FloorZ) || (Owner.bOnMObj);
	}

	bool bIsInPain(void)
	{
		State PainState = Owner.FindState('Pain');
		if (PainState != NULL && Owner.InStateSequence(Owner.CurState, PainState))
		{
			return true;
		}
		return false;
	}

	double GetVelocity (void)
	{
		return Owner.Vel.Length();
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void Tick(void)
	{
		if (!(Owner && Owner is "PlayerPawn"))
		{
		  destroy(); return;
		}
		int ctrltype = isoctrltype.GetInt();
		bool stopped_or_changed_movement = !(Owner.player.cmd.forwardmove | Owner.player.cmd.sidemove);
		stopped_or_changed_movement |= (Owner.player.cmd.forwardmove != old_forwardmove);
		stopped_or_changed_movement |= (Owner.player.cmd.sidemove != old_sidemove);
		old_forwardmove = Owner.player.cmd.forwardmove;
		old_sidemove = Owner.player.cmd.sidemove;
		if (Owner && Owner is "PlayerPawn")
		{
		  if (bIsOnFloor() && (DECEL_MULT.GetFloat() < 1.0))
		  {
		    if (stopped_or_changed_movement)
			{
			  // Owner.A_SetSpeed((2.0 - DECEL_MULT.GetFloat()) * 2);
			  // decelerate the player, if not in pain
			  if (!bIsInPain())
			    {
			      Owner.vel.x *= DECEL_MULT.GetFloat();
			      Owner.vel.y *= DECEL_MULT.GetFloat();
			    }
			}
		    FLineTraceData tf, tb;
		    bool bbf = Owner.LineTrace(Owner.angle, 1.5*Owner.radius, 0, TRF_NOSKY,
									   0.5*Owner.height, 0, 0, tf);
			bool bbb = Owner.LineTrace(Owner.angle + 180, 1.5*Owner.radius, 0, TRF_NOSKY,
									   0.5*Owner.height, 0, 0, tb);
			if ((Owner.player.cmd.sidemove == 0) && !bbf && !bbb)
			{
				// decelarate perpendicular velocity if not sliding along any obstacle
				float unitx = Cos(Owner.angle);
				float unity = Sin(Owner.angle);
				float mycross = Owner.vel.x * unity - Owner.vel.y * unitx;
				float mydot = Owner.vel.x * unitx + Owner.vel.y * unity;
				if ((Owner.player.cmd.forwardmove != 0) && (ctrltype == 0))
				{
					Owner.vel.x += (1.0 - DECEL_MULT.GetFloat()) * (mydot * unitx - Owner.vel.x);
					Owner.vel.y += (1.0 - DECEL_MULT.GetFloat()) * (mydot * unity - Owner.vel.y);
				}
			}
		  }
		}
		Super.Tick();
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================
	States
	{
	Use:
		TNT1 A 0;
		Fail;
	Pickup:
		TNT1 A 0
		{
			return true;
		}
		Stop;
	}
}

class IsometricMovement : CustomInventory
{
	int diffangle, face_cam_mult, ctrltype, oldcmdyaw, oldsidemove, oldforwardmove;
	cvar isoyaw, aimassist, keyctrltype, mousemove, lookingup, lookingdown, rotateleft, rotateright, isospeed;
	bool sidedownfacecam, fwddownfacecam;
	int debounce_timer, debounce_ticks;
	int mousex, mousey, mx, my, mxmax, mymax;
	float msense;
	double plrpitch;
	bool hipfire, fleemode, pointmonster, pointshootable, pointusable, nolos2shootable, firekeydown, altfirekeydown, mrotate;
	double xproj, yproj, zproj;
	int seestatecounter;
	int footstepCounter;
	double footstepLength;
	bool footstepFoot;
 
	property mousex : mousex;
	property mousey : mousey;
	property hipfire : hipfire;
	property fleemode : fleemode;
	property mrotate : mrotate;
	property pointmonster : pointmonster;
	property pointshootable : pointshootable;
	property pointusable : pointusable;
	property nolos2shootable : nolos2shootable;
	property firekeydown : firekeydown;
	property altfirekeydown : altfirekeydown;
	property plrpitch : plrpitch; // Pitch to adopt when aim-assist in hipfire mode returns negative
	
	Default
	{
		IsometricMovement.mousex 0;
		IsometricMovement.mousey 0;

		IsometricMovement.pointmonster false;
		IsometricMovement.pointshootable false;
		IsometricMovement.pointusable false;
		IsometricMovement.nolos2shootable false;
		IsometricMovement.firekeydown false;
		IsometricMovement.altfirekeydown false;
		IsometricMovement.hipfire false;
		IsometricMovement.fleemode false;
		IsometricMovement.mrotate false;
		IsometricMovement.plrpitch 0;

		Inventory.MaxAmount 1;
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNTOSSABLE
		+INVENTORY.UNCLEARABLE
		+INVENTORY.AUTOACTIVATE
	}

	override void BeginPlay()
	{
		Super.BeginPlay();
		// ChangeStatNum(Thinker.STAT_PLAYER - 1); // For performance (dangerous code)
	}
  
	bool bIsInPain(void)
	{
		State PainState = Owner.FindState('Pain');
		if (PainState != NULL && Owner.InStateSequence(Owner.CurState, PainState))
		{
			return true;
		}
		return false;
	}

	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		if (Owner && Owner is "PlayerPawn" && Owner.player)
		{
		  isoyaw = CVar.GetCVar("IsometricYaw", Owner.player);
		  aimassist = CVar.GetCVar("IsoAimAssist", Owner.player);
		  mousemove = CVar.GetCVar("IsoMouseMove", Owner.player);
		  lookingup = CVar.GetCVar("IsoLookingUp", Owner.player);
		  lookingdown = CVar.GetCVar("IsoLookingDown", Owner.player);
		  keyctrltype = CVar.GetCVar("IsoControlType", Owner.player);
		  rotateleft = CVar.GetCVar("RotatingLeft", Owner.player);
		  rotateright = CVar.GetCVar("RotatingRight", Owner.player);
		  isospeed = CVar.GetCVar("IsometricSpeed", Owner.player);
		  PlayerPawn(Owner.player.mo).bMakeFootsteps = True;
		}
		face_cam_mult = 1;
		oldcmdyaw = 0;
		oldsidemove = 0;
		oldforwardmove = 0;
		sidedownfacecam = false;
		fwddownfacecam = false;

		mx = 0; my = 0;
		msense = 20.0; // Bigger means slower
		mxmax = (int)(msense*0.5*Screen.GetWidth());
		mymax = (int)(msense*0.5*Screen.GetHeight());

		debounce_timer = 0;
		debounce_ticks = 10; // Things cannot be repeatedly switched/used faster than this by clicking
		seestatecounter = 0;
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	void DoFootstep(TerrainDef Ground) // For diablo-style mouse movement, can't use owner's MakeFootSteps so replicate in inventory item
	{
		Sound Step = Ground.StepSound;

		//Generic foot-agnostic sound takes precedence.
		if(!Step)
		{
			//Apparently most people walk with their right foot first, so assume that here.
			if (!footstepFoot)
			{
				Step = Ground.LeftStepSound;
			}
			else
			{
				Step = Ground.RightStepSound;
			}

			footstepFoot = !footstepFoot;
		}

		if(Step)
		{
			Owner.A_StartSound(Step, flags: CHANF_OVERLAP, volume: Ground.StepVolume * snd_footstepvolume);
		}

		//Steps make splashes regardless.
		bool Heavy = (Owner.Mass >= 200) ? 0 : THW_SMALL; //Big player makes big splash.
		Owner.HitWater(Owner.CurSector, (Owner.Pos.XY, Owner.CurSector.FloorPlane.ZatPoint(Owner.Pos.XY)), true, false, flags: Heavy | THW_NOVEL);
	}

	void InvMakeFootsteps() // For diablo-style mouse movement, can't use owner's MakeFootSteps so replicate in inventory item
	{
		if(Owner.pos.z > Owner.floorz) return;

		let Ground = Owner.GetFloorTerrain();

		if(Ground)
		{
			int Delay = (Owner.player.cmd.buttons & BT_RUN) ? Ground.RunStepTics : Ground.WalkStepTics;

			if(Ground.StepDistance > 0)
			{ // distance-based terrain
				footstepCounter = 0;
				double moveVel = Owner.vel.xy.length();
				if(moveVel > Ground.StepDistanceMinVel)
				{
					footstepLength += moveVel;
					while(footstepLength > Ground.StepDistance)
					{
						footstepLength -= Ground.StepDistance;
						DoFootstep(Ground);
					}
				}
				else
				{
					footstepLength = Ground.StepDistance;
				}
			}
			else if(Delay > 0)
			{ // delay-based terrain
				footstepLength = 0;
				if(footstepCounter % Delay == 0)
				{
					DoFootstep(Ground);
				}
				footstepCounter = (footstepCounter + 1) % Delay;
			}
			else
			{
				footstepCounter = 0;
				footstepLength = Ground.StepDistance;
				footstepFoot = false;
			}
		}
	}

    void UpdateScreenProjVars()
	{
		let player = Owner.player;
		if (player.camera && player.camera.ViewPos && player.camera.player && player.camera.GetClassName() == 'SpectatorCamera')
		{
			double xscale = 0.375*( screenblocks >= 10 ? Screen.GetWidth() : 0.1*screenblocks*Screen.GetWidth() );
			double myfov = (player.camera.player ? player.camera.player.FOV : player.camera.CameraFOV);
			xscale *= 1.0/tan(clamp(myfov, 5.0, 170.0) * 0.5);
			double aspratio = (1.0 * Screen.GetWidth()) / (1.0 * Screen.GetHeight());
			if (aspratio > 1.0) xscale *= 1.777778/aspratio;
			double yscale = 1.253229 - 0.0616458*sin(player.camera.pitch)*sin(player.camera.pitch) - 0.191609*sin(player.camera.pitch);
			xproj = xscale/player.camera.ViewPos.offset.length();
			yproj = Sin(player.camera.pitch)*xproj*yscale;
			zproj = Cos(player.camera.pitch)*xproj*yscale;
		}
	}
	
	int, Vector3, actor, Line ScanTrace(int sx, int sy)
	{
		int validloc = TRACE_HitNone;
		actor pointedmo = NULL;
		Line pointedln = NULL;
		let player = Owner.player;
		pointmonster = false; pointshootable = false; pointusable = false; nolos2shootable = false;
		Vector3 hitloc = (player.camera ? player.camera.pos : Owner.pos);
		int firsttraceflags = TRF_THRUACTORS | TRF_THRUBLOCK | TRF_THRUHITSCAN;
		double offsetz = 0.5 * ( player.camera && player.camera.tracer ? player.camera.tracer.height : Owner.height );
		Vector2 sxy = (sx/xproj, -sy/yproj); // sy is positive for bottom half of screen
		double relposdist = sxy.length();
		double screenang = sxy.Angle();
		double worldang = deltaangle(-player.camera.angle, -90+screenang);
		double isodist = (player.camera.ViewPos ? player.camera.ViewPos.offset.length() : 100.0);
		double azimax = atan2(isodist, relposdist);
		hitloc = Owner.pos + (relposdist*Cos(worldang), relposdist*Sin(worldang), offsetz);

		FLineTraceData t, t2;
		int trf_flags = TRF_ABSPOSITION | TRF_THRUACTORS | TRF_THRUBLOCK | TRF_THRUHITSCAN;
		int trf_flags2 = TRF_ABSPOSITION | TRF_ALLACTORS | TRF_THRUBLOCK | TRF_THRUHITSCAN;
		Vector3 dir = (Cos(deltaangle(180, player.camera.angle))*Cos(player.camera.pitch),
					   Sin(deltaangle(180, player.camera.angle))*Cos(player.camera.pitch),
					   Sin(player.camera.pitch));
		for (double mylen = -0*tan(azimax)*relposdist; mylen < 3.0*tan(azimax)*relposdist; mylen += offsetz)
		{
			Vector3 inhitloc = hitloc + mylen*dir;
			if (level.IsPointInLevel(inhitloc))
			{
				// Shoot trace towards (anti-parallel to) camera
				if (player.mo.LineTrace(deltaangle(180, player.camera.angle), isodist*3, -player.camera.pitch, trf_flags,
										inhitloc.z, inhitloc.x, inhitloc.y, data:t))
				{
					inhitloc = t.HitLocation - 0.1 * dir;
					// Shoot trace away from (parallel to) camera
					if(player.mo.LineTrace(player.camera.angle, isodist*3, player.camera.pitch, trf_flags2,
										   inhitloc.z, inhitloc.x, inhitloc.y, data:t2))
					{
						inhitloc = t2.HitLocation;
						Vector3 dummy = level.vec3diff(Owner.pos, inhitloc);
						plrpitch = atan2(Owner.pos.z + player.ViewHeight*player.crouchfactor - inhitloc.z, dummy.xy.length());
						if (t2.HitType == TRACE_HitActor && t2.HitActor)
						{
							pointmonster = t2.HitActor.bISMONSTER && !t2.HitActor.bCORPSE;
							pointshootable = t2.HitActor.bSHOOTABLE;
							pointusable = !(t2.HitActor.player || t2.HitActor.bISMONSTER || t2.HitActor.bCORPSE
											|| t2.HitActor.bMASTERNOSEE || t2.HitActor.bONLYVISIBLEINMIRRORS
											|| t2.HitActor.bDORMANT || t2.HitActor.bINVISIBLE || t2.HitActor.bMISSILE
											|| t2.HitActor.bNOINTERACTION || t2.HitActor.bICECORPSE
											|| t2.HitActor.bCRASHED || t2.HitActor.bINCONVERSATION);
							validloc = TRACE_HitActor;
							pointedmo = t2.HitActor;
						}
						else if (t2.HitType == TRACE_HitWall && t2.HitLine && t2.HitTexture && t2.HitTexture.IsValid())
						{
							pointusable = (t2.HitLine.activation & (SPAC_Use | SPAC_UseThrough | SPAC_UseBack));
							pointusable &= (t2.HitLine.special != 0);
							validloc = TRACE_HitWall;
							pointedln = t2.HitLine;
						}
						else if (t2.HitType == TRACE_HitFloor)
						{
							validloc = TRACE_HitFloor;
							inhitloc.z += offsetz;
						}
					}
				}
				hitloc = inhitloc;
				break;
			}
		}
		return validloc, hitloc, pointedmo, pointedln;
	}

	//get shorted xy-distance between actor and line
	static double shortest_dxy(Actor mo, Line ln)
	{
		double lnlength = (ln.v1.p - ln.v2.p).length();
		if (lnlength == 0.0) return (mo.pos.xy - ln.v1.p).length();
		else
		{
			return abs((ln.v2.p.y - ln.v1.p.y)* mo.pos.x - (ln.v2.p.x - ln.v1.p.x)* mo.pos.y
					   + ln.v2.p.x * ln.v1.p.y - ln.v2.p.y * ln.v1.p.x) / lnlength;
		}
	}

	bool TryInteract(int tracehittype, Actor mo, Line ln)
	{
		bool withinuserange = false;
		let player = Owner.player;
		if (tracehittype == TRACE_HitActor && mo)
		{
			if ((Owner.Distance3D(mo) < 64 + mo.Radius) && Owner.CheckSight(mo))
			{
				withinuserange = true;
				if (debounce_timer == 0)
				{
					debounce_timer = debounce_ticks;
					if (mo.bSPECIAL) mo.Touch(Owner);
					else if (mo.bUSESPECIAL && mo.health > 0)
					{
						// This whole segment is only for old DECORATE type activate functions
						if (mo.activationtype & (THINGSPEC_Activate | THINGSPEC_Deactivate | THINGSPEC_Switch))
						{
							if ((mo.activationtype & THINGSPEC_Switch)
								&& !(mo.activationtype & (THINGSPEC_Activate | THINGSPEC_Deactivate)))
							{
								mo.activationtype |= THINGSPEC_Activate;
							}
							// Can it be activated?
							if (mo.activationtype & THINGSPEC_Activate)
							{
								mo.activationtype &= ~THINGSPEC_Activate; // Clear flag
								if (mo.activationtype & THINGSPEC_Switch) // Set other flag if switching
									mo.activationtype |= THINGSPEC_Deactivate;
								mo.Activate(Owner);
							}
							// If not, can it be deactivated?
							else if (mo.activationtype & THINGSPEC_Deactivate)
							{
								mo.activationtype &= ~THINGSPEC_Deactivate; // Clear flag
								if (mo.activationtype & THINGSPEC_Switch)	// Set other flag if switching
									mo.activationtype |= THINGSPEC_Activate;
								mo.Deactivate(Owner);
							}
						}
					}
					else if (!mo.Used(Owner)) A_StartSound("noselect", CHAN_ITEM);
				} // debounce_timer
			} // Distance3D
		}
		else if (tracehittype == TRACE_HitWall && ln)
		{
			if (shortest_dxy(Owner, ln) < 64)
			{
				bool swvisible = true;
				int plside = Level.ActorOnLineSide(Owner, ln);
				if (plside == 1 && !(ln.activation & SPAC_UseBack)) { swvisible = false; }
				if (plside == 0 && ((ln.activation & (SPAC_Use | SPAC_UseThrough | SPAC_UseBack)) == SPAC_UseBack))
			    { swvisible = false; }

				if (swvisible)
				{
					if (ln.activation & (SPAC_Use | SPAC_UseThrough | SPAC_UseBack))
					{
						int side = 0; // Level.ActorOnLineSide(Owner, ln); // SPAC_UseBack gives me segfaults
						if (!ln.Activate(Owner, side, SPAC_Use)) // (side == 0 ? SPAC_Use : SPAC_UseBack)))
							Owner.A_StartSound("noselect", CHAN_ITEM);
						else
							withinuserange = true;
					}
				} else {
					Owner.A_StartSound("noselect", CHAN_ITEM);
				}
			}
		}
		return withinuserange;
	}

	int, int GetScreenXY(Vector3 relpos)
	{
		let player = Owner.player;
		int sx, sy;
		double  diffang = deltaangle(relpos.Angle(), player.camera.angle);
		sx = (int)( relpos.xy.length() * Sin(diffang) * xproj );
		sy = (int)( -relpos.xy.length() * Cos(diffang) * yproj - relpos.z * zproj );
		return sx, sy;
	}

	void MoveRelativeToCamera(UserCmd cmd)
	{
		double fm = 0;
		double sm = 0;
		let player = Owner.player;

		if (!bIsInPain())
		{
		    [fm, sm] = PlayerPawn(Owner).TweakSpeeds(cmd.forwardmove, cmd.sidemove);
		    sm *= Owner.Speed / 256.;
		    fm *= Owner.Speed / 256.;
		    if (PlayerPawn(Owner).CanCrouch() && player.crouchfactor != 1)
		    {
		      sm *= player.crouchfactor;
		      fm *= player.crouchfactor;
		    }
		    double friction, movefactor;
		    [friction, movefactor] = PlayerPawn(Owner).GetFriction();
		    if (!player.onground && !Owner.bNoGravity && !waterlevel) movefactor *= level.aircontrol;
		    sm *= movefactor * (35 / TICRATE);
		    fm *= movefactor * (35 / TICRATE);
			// cancel old move
			if (fm)
			{
				Owner.Vel.X -= fm * Cos(Owner.angle);
				Owner.Vel.Y -= fm * Sin(Owner.angle);
			}
		    if (sm)
		    {
		      let a = Owner.angle - 90.0;
		      Owner.Vel.X -= sm * Cos(a);
		      Owner.Vel.Y -= sm * Sin(a);
		    }
			// apply new move
			if (fm != 0 || sm != 0)
			{
				double camyaw = isoyaw.GetFloat();
				Owner.Vel.X += fm * Cos(camyaw) + sm * Sin(camyaw);
				Owner.Vel.Y += - sm * Cos(camyaw) + fm * Sin(camyaw);
			}
		}
	}

	override void Tick(void)
	{
		if (!(Owner && Owner is "PlayerPawn"))
		{
			destroy(); return;
		}

		mxmax = (int)(msense*0.5*Screen.GetWidth());
		mymax = (int)(msense*0.5*Screen.GetHeight());

		if (debounce_timer > 0) debounce_timer--;

		if (!automapactive && Owner && Owner is "PlayerPawn" && Owner.player) // Remap controls for isometric mode
		{
		  let player = Owner.player;
		  UserCmd cmd = player.cmd;
		  ctrltype = keyctrltype.GetInt();
		  diffangle = Owner.deltaangle(Owner.angle, isoyaw.GetFloat());
		  if (abs(diffangle) > 90) face_cam_mult = -1; // Player is facing camera
		  else face_cam_mult = 1; // Player is facing away from camera

		  Owner.angle -= cmd.yaw * (360/65536.f); // Cancel default mouse-turn first
		  float newyaw = 0;

 		  if(diffangle >= 0) newyaw += cmd.pitch;
		  else if(diffangle < 0) newyaw -= cmd.pitch;
		  if(diffangle > 45 && diffangle < 135) newyaw += 2*cmd.pitch;
		  else if(diffangle > -135 && diffangle < -45) newyaw -= 2*cmd.pitch;
 
		  newyaw += 2*face_cam_mult*cmd.yaw;
		  float absdiff = abs(diffangle);
		  oldcmdyaw = cmd.yaw;

		  if (!mousemove.GetBool()) Owner.angle += newyaw * (360./65536.);

		  // Reverse side-movement (strafing) control mapping
		  bool keychange = (oldsidemove != cmd.sidemove) || (oldforwardmove != cmd.forwardmove);
		  if (keychange)
		  {
		    if ((abs(diffangle) > 112.5) && (oldsidemove == 0)) sidedownfacecam = true;
		    else sidedownfacecam = false;
		    if ((abs(diffangle) > 112.5) && (oldforwardmove == 0)) fwddownfacecam = true;
		    else fwddownfacecam = false;
		  }

		  if (ctrltype == 1) // Keyboard control relative to camera view direction
		  {
			  MoveRelativeToCamera(cmd);
		  }
		  else if ((sidedownfacecam || fwddownfacecam) && !bIsInPain())
		  {
		    double fm, sm;
		    [fm, sm] = PlayerPawn(Owner).TweakSpeeds(cmd.forwardmove, cmd.sidemove);
		    sm *= Owner.Speed / 256.;
		    fm *= Owner.Speed / 256.;
		    if (PlayerPawn(Owner).CanCrouch() && player.crouchfactor != 1)
		    {
		      sm *= player.crouchfactor;
		      fm *= player.crouchfactor;
		    }
		    double friction, movefactor;
		    [friction, movefactor] = PlayerPawn(Owner).GetFriction();
		    if (!player.onground && !Owner.bNoGravity && !waterlevel) movefactor *= level.aircontrol;
		    sm *= 2.0 * movefactor * (35 / TICRATE); // Factor of 2.0 to negate default MovePlayer()
		    fm *= 2.0 * movefactor * (35 / TICRATE);
		    if (sm && sidedownfacecam)
		    {
		      let a = Owner.angle + 90.0;
		      Owner.Vel.X += sm * Cos(a);
		      Owner.Vel.Y += sm * Sin(a);
		    }
		  }

		  oldsidemove = cmd.sidemove;
		  oldforwardmove = cmd.forwardmove;

		  if (mousemove.GetBool() && PlayerPawn(Owner).player.camera.GetClassName() == 'SpectatorCamera') // Diablo-Style
		  {
			  // Handle mouse movement on screenspace
			  int inyaw = cmd.yaw; // GetPlayerInput(INPUT_YAW);
			  int inpitch = cmd.pitch; // GetPlayerInput(INPUT_PITCH);
			  if (mrotate)
			  {
				  if (inyaw == 0 && inpitch == 0)
				  {
					  rotateleft.SetBool(false); rotateright.SetBool(false);
				  } else {
					  float mouseangle = atan2(my, mx);
					  float anglechange = Owner.deltaangle(atan2(my - inpitch, mx - inyaw), mouseangle);
					  Vector2 mvec = (mx, my);
					  float mrad = mvec.Length();
					  float rotspeed = isospeed.GetFloat();
					  if(anglechange > 0)
					  {
						  rotateleft.SetBool(true);
						  rotateright.SetBool(false);
						  mx = (int)(mrad * Cos (mouseangle - rotspeed));
						  my = (int)(mrad * Sin (mouseangle - rotspeed));
					  } else {
						  rotateleft.SetBool(false);
						  rotateright.SetBool(true);
						  mx = (int)(mrad * Cos (mouseangle + rotspeed));
						  my = (int)(mrad * Sin (mouseangle + rotspeed));
					  }
					  mx = clamp(mx, -mxmax, mxmax);
					  my = clamp(my, -mymax, mymax);
				  }
			  } else {
				  mx = clamp(mx - inyaw, -mxmax, mxmax);
				  my = clamp(my - inpitch, -mymax, mymax);
			  }
			  mousex = (int)(mx/msense);
			  mousey = (int)(my/msense);

			  UpdateScreenProjVars();
			  int validloc = TRACE_HitNone;
			  Vector3 hitloc;
			  actor pointedmo = NULL;
			  Line pointedln = NULL;
			  [validloc, hitloc, pointedmo, pointedln] = ScanTrace(mousex, mousey); // What is the mouse pointing at?

			  if (pointshootable)
			  {
				  FLineTraceData tt;
				  bool tbool = player.mo.LineTrace(Owner.AngleTo(pointedmo), Owner.Distance3D(pointedmo),
												   plrpitch, 0, player.ViewHeight*player.crouchfactor,
												   0, 0, data:tt);
				  nolos2shootable = !tbool || !(tt.HitType == TRACE_HitActor && tt.HitActor && tt.HitActor.bSHOOTABLE);
			  }

			  int plrx = 0;
			  int plry = 0;
			  if (player.camera) [plrx, plry] = GetScreenXY(level.vec3diff(player.camera.pos, Owner.pos));
			  diffangle = deltaangle(Owner.angle, player.camera.angle);
			  double diffangle2 = deltaangle(-90, atan2((mousey-plry)/yproj, (mousex-plrx)/xproj));
			  if (fleemode && validloc != TRACE_HitNone)
				  diffangle2 = deltaangle(diffangle2, player.camera.angle);
			  
			  if (validloc != TRACE_HitNone && !fleemode) diffangle2 = level.vec3diff(Owner.pos, hitloc).Angle();
			  int buttons = cmd.buttons;
			  if ((buttons & (BT_ATTACK | BT_ALTATTACK)) || firekeydown || altfirekeydown
				  || hipfire || fleemode || lookingup.GetBool() || lookingdown.GetBool())
			  {
				  if (validloc != TRACE_HitNone) Owner.A_SetAngle(diffangle2, SPF_INTERPOLATE); // Turn to face the mouse cursor
				  else Owner.A_SetAngle(Owner.angle + deltaangle(diffangle2, diffangle), SPF_INTERPOLATE);

				  bool movefwd = false; // Move towards mouse cursor
				  bool interact = false; // Interact with object/line the cursor is pointing at
				  if (fleemode && firekeydown)
				  {
					  movefwd = true;
				  }
				  else if (!fleemode && !hipfire)
				  {
					  if ((firekeydown || altfirekeydown) && pointshootable)
					  {
						  if (player.readyweapon && player.readyweapon.bMELEEWEAPON && pointedmo
								  && (Owner.Distance3D(pointedmo) > Owner.MeleeRange + Owner.MELEEDELTA + pointedmo.Radius))
						  {
							  movefwd = true;
						  }
						  else if (nolos2shootable && debounce_timer == 0)
						  {
							  movefwd = false;
							  Owner.A_StartSound("noselect", CHAN_WEAPON);
							  debounce_timer = debounce_ticks;
						  }
						  else
						  {
							  Owner.A_SetPitch(plrpitch); // Fire away
						  }
					  }
					  else if (altfirekeydown && pointusable)
					  {
						  interact = TryInteract(validloc, pointedmo, pointedln);
						  movefwd = !interact;
					  }
					  else if (firekeydown)
					  {
						  movefwd = true;
					  }
				  }

				  if (movefwd)
				  {
					  double fm, sm;
					  [fm, sm] = PlayerPawn(Owner).TweakSpeeds((buttons & BT_RUN ? 12800 : 6400), 0);
					  // sm *= Owner.Speed / 256.;
					  fm *= Owner.Speed / 256.;
					  if (PlayerPawn(Owner).CanCrouch() && player.crouchfactor != 1)
					  {
						  // sm *= player.crouchfactor;
						  fm *= player.crouchfactor;
					  }
					  double friction, movefactor;
					  [friction, movefactor] = PlayerPawn(Owner).GetFriction();
					  if (!player.onground && !Owner.bNoGravity && !waterlevel) movefactor *= level.aircontrol;
					  // sm *= movefactor * (35 / TICRATE);
					  fm *= movefactor * (35 / TICRATE);
					  if ((waterlevel || Owner.bNoGravity) && Owner.Pitch != 0 && !player.GetClassicFlight())
					  {
						  double zpush = fm * sin(Owner.Pitch);
						  if (waterlevel && waterlevel < 2 && zpush < 0) zpush = 0;
						  Owner.Vel.Z -= zpush;
						  fm *= cos(Pitch);
					  }
					  Owner.Thrust(7.0*fm, Owner.angle);
					  InvMakeFootsteps();
					  if (seestatecounter++ > 2*Owner.CurState.Tics)
					  {
						  Owner.SetState(Owner.CurState.NextState);
						  seestatecounter = 0;
					  }
					  if (!Owner.InStateSequence(Owner.CurState, Owner.SeeState))
					  {
						  Owner.SetState(Owner.SeeState);
					  }
				  }
				  else if (!(buttons & (BT_ATTACK | BT_ALTATTACK)))
				  {
					  Owner.SetState(Owner.SpawnState);
				  }
			  }
		  }
		}

		Super.Tick();
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================
	States
	{
	Use:
		TNT1 A 0;
		Fail;
	Pickup:
		TNT1 A 0
		{
			return true;
		}
		Stop;
	}
}

class MoveTorch : Inventory
{
        // MoveTorch given to me by Madame Rachelle
        DynamicLight light;
	vector3 offs;
	
	default
	{
		Inventory.MaxAmount 1;
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNTOSSABLE
		+INVENTORY.AUTOACTIVATE
	}
	override void DoEffect()
	{
		Super.DoEffect();
		if (!light)
		{
			light = DynamicLight(Actor.Spawn("DynamicLight"));
			light.battenuate = true;
			light.bnoshadowmap = true;
			light.args[0] = 132;
			light.args[1] = 132;
			light.args[2] = 132;
			light.args[3] = 124;
			light.args[4] = 124;
			offs = (owner.radius*Cos(owner.angle), owner.radius*Sin(owner.angle), owner.player.viewheight);
		}
		if (light)
		{
			light.SetOrigin(owner.pos + offs, true);
			light.prev = owner.prev + offs;
			light.vel = owner.vel;
		}
	}

	override void OnDestroy()
	{
		if (light)
			light.Destroy();
		Super.OnDestroy();
	}
}
