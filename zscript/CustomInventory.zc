class Z_NashMove : CustomInventory
{
//===========================================================================
//
// nashmove.pk3
//
// Less slippery player movement. Works for any player class.
//
// Originally written by Nash Muhandes.
//
//
// Feel free to use this in your mods. You don't have to ask my permission!
//
//===========================================================================

	int old_forwardmove, old_sidemove;
	
	Default
	{
		Inventory.MaxAmount 1;
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNTOSSABLE
		+INVENTORY.UNCLEARABLE
		+INVENTORY.AUTOACTIVATE
	}

	// How much to reduce the slippery movement.
	// Lower number = less slippery.
	cvar DECEL_MULT;
	cvar isoctrltype;

	override void PostBeginPlay()
	{
	        old_forwardmove = 0;
			old_sidemove = 0;
	        if (Owner && Owner is "PlayerPawn")
			{
				DECEL_MULT = CVar.GetCVar("DecelMult", Owner.player);
				isoctrltype = CVar.GetCVar("IsoControlType", Owner.player);
			}
	}
	//===========================================================================
	//
	//
	//
	//===========================================================================

	bool bIsOnFloor(void)
	{
		return (Owner.Pos.Z == Owner.FloorZ) || (Owner.bOnMObj);
	}

	bool bIsInPain(void)
	{
		State PainState = Owner.FindState('Pain');
		if (PainState != NULL && Owner.InStateSequence(Owner.CurState, PainState))
		{
			return true;
		}
		return false;
	}

	double GetVelocity (void)
	{
		return Owner.Vel.Length();
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	override void Tick(void)
	{
		if (!(Owner && Owner is "PlayerPawn"))
		{
		  destroy(); return;
		}
		int ctrltype = isoctrltype.GetInt();
		bool stopped_or_changed_movement = !(Owner.player.cmd.forwardmove | Owner.player.cmd.sidemove);
		stopped_or_changed_movement |= (Owner.player.cmd.forwardmove != old_forwardmove);
		stopped_or_changed_movement |= (Owner.player.cmd.sidemove != old_sidemove);
		old_forwardmove = Owner.player.cmd.forwardmove;
		old_sidemove = Owner.player.cmd.sidemove;
		if (Owner && Owner is "PlayerPawn")
		{
		  if (bIsOnFloor() && (DECEL_MULT.GetFloat() < 1.0))
		  {
		    if (stopped_or_changed_movement)
			{
			  // Owner.A_SetSpeed((2.0 - DECEL_MULT.GetFloat()) * 2);
			  // decelerate the player, if not in pain
			  if (!bIsInPain())
			    {
			      Owner.vel.x *= DECEL_MULT.GetFloat();
			      Owner.vel.y *= DECEL_MULT.GetFloat();
			    }
			}
		    FLineTraceData tf, tb;
		    bool bbf = Owner.LineTrace(Owner.angle, 1.5*Owner.radius, 0, TRF_NOSKY,
									   0.5*Owner.height, 0, 0, tf);
			bool bbb = Owner.LineTrace(Owner.angle + 180, 1.5*Owner.radius, 0, TRF_NOSKY,
									   0.5*Owner.height, 0, 0, tb);
			if ((Owner.player.cmd.sidemove == 0) && !bbf && !bbb)
			{
				// decelarate perpendicular velocity if not sliding along any obstacle
				float unitx = Cos(Owner.angle);
				float unity = Sin(Owner.angle);
				float mycross = Owner.vel.x * unity - Owner.vel.y * unitx;
				float mydot = Owner.vel.x * unitx + Owner.vel.y * unity;
				if ((Owner.player.cmd.forwardmove != 0) && (ctrltype == 0))
				{
					Owner.vel.x += (1.0 - DECEL_MULT.GetFloat()) * (mydot * unitx - Owner.vel.x);
					Owner.vel.y += (1.0 - DECEL_MULT.GetFloat()) * (mydot * unity - Owner.vel.y);
				}
			}
		  }
		}
		Super.Tick();
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================
	States
	{
	Use:
		TNT1 A 0;
		Fail;
	Pickup:
		TNT1 A 0
		{
			return true;
		}
		Stop;
	}
}

class IsometricMovement : CustomInventory
{
	int diffangle, face_cam_mult, ctrltype, oldcmdyaw, oldsidemove, oldforwardmove;
	cvar isoyaw, aimassist, keyctrltype, mousemove;
	bool sidedownfacecam, fwddownfacecam;
	int mousex, mousey;

	property mousex : mousex;
	property mousey : mousey;
	
	Default
	{
		IsometricMovement.mousex 0;
		IsometricMovement.mousey 0;

		Inventory.MaxAmount 1;
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNTOSSABLE
		+INVENTORY.UNCLEARABLE
		+INVENTORY.AUTOACTIVATE
	}

	bool bIsInPain(void)
	{
		State PainState = Owner.FindState('Pain');
		if (PainState != NULL && Owner.InStateSequence(Owner.CurState, PainState))
		{
			return true;
		}
		return false;
	}

	override void PostBeginPlay()
	{
	        Super.PostBeginPlay();
	        if (Owner && Owner is "PlayerPawn")
		{
		  isoyaw = CVar.GetCVar("IsometricYaw", Owner.player);
		  aimassist = CVar.GetCVar("IsoAimAssist", Owner.player);
		  mousemove = CVar.GetCVar("IsoMouseMove", Owner.player);
		  keyctrltype = CVar.GetCVar("IsoControlType", Owner.player);
		}
		face_cam_mult = 1;
		oldcmdyaw = 0;
		oldsidemove = 0;
		oldforwardmove = 0;
		sidedownfacecam = false;
		fwddownfacecam = false;
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================

	void MoveRelativeToCamera(UserCmd cmd)
	{
		double fm = 0;
		double sm = 0;
		let player = Owner.player;

		if (!bIsInPain())
		{
		    [fm, sm] = PlayerPawn(Owner).TweakSpeeds(cmd.forwardmove, cmd.sidemove);
		    sm *= Owner.Speed / 256.;
		    fm *= Owner.Speed / 256.;
		    if (PlayerPawn(Owner).CanCrouch() && player.crouchfactor != 1)
		    {
		      sm *= player.crouchfactor;
		      fm *= player.crouchfactor;
		    }
		    double friction, movefactor;
		    [friction, movefactor] = PlayerPawn(Owner).GetFriction();
		    if (!player.onground && !Owner.bNoGravity && !waterlevel) movefactor *= level.aircontrol;
		    sm *= movefactor * (35 / TICRATE);
		    fm *= movefactor * (35 / TICRATE);
			// cancel old move
			if (fm)
			{
				Owner.Vel.X -= fm * Cos(Owner.angle);
				Owner.Vel.Y -= fm * Sin(Owner.angle);
			}
		    if (sm)
		    {
		      let a = Owner.angle - 90.0;
		      Owner.Vel.X -= sm * Cos(a);
		      Owner.Vel.Y -= sm * Sin(a);
		    }
			// apply new move
			if (fm != 0 || sm != 0)
			{
				double camyaw = isoyaw.GetFloat();
				Owner.Vel.X += fm * Cos(camyaw) + sm * Sin(camyaw);
				Owner.Vel.Y += - sm * Cos(camyaw) + fm * Sin(camyaw);
			}
		}
	}

	override void Tick(void)
	{
		if (!(Owner && Owner is "PlayerPawn"))
		{
			destroy(); return;
		}

		if (!automapactive && Owner && Owner is "PlayerPawn") // Remap controls for isometric mode
		{
		  let player = Owner.player;
		  UserCmd cmd = player.cmd;
		  ctrltype = keyctrltype.GetInt();
		  diffangle = Owner.deltaangle(Owner.angle, isoyaw.GetFloat());
		  if (abs(diffangle) > 90) face_cam_mult = -1; // Player is facing camera
		  else face_cam_mult = 1; // Player is facing away from camera

		  Owner.angle -= cmd.yaw * (360./65536.); // Cancel default mouse-turn first
		  float newyaw = 0;

 		  if(diffangle >= 0) newyaw += cmd.pitch;
		  else if(diffangle < 0) newyaw -= cmd.pitch;
		  if(diffangle > 45 && diffangle < 135) newyaw += 2*cmd.pitch;
		  else if(diffangle > -135 && diffangle < -45) newyaw -= 2*cmd.pitch;
 
		  newyaw += 2*face_cam_mult*cmd.yaw;
		  float absdiff = abs(diffangle);
		  oldcmdyaw = cmd.yaw;

		  Owner.angle += newyaw * (360./65536.);

		  // Reverse side-movement (strafing) control mapping
		  bool keychange = (oldsidemove != cmd.sidemove) || (oldforwardmove != cmd.forwardmove);
		  if (keychange)
		  {
		    if ((abs(diffangle) > 112.5) && (oldsidemove == 0)) sidedownfacecam = true;
		    else sidedownfacecam = false;
		    if ((abs(diffangle) > 112.5) && (oldforwardmove == 0)) fwddownfacecam = true;
		    else fwddownfacecam = false;
		  }

		  if (ctrltype == 1) // Keyboard control relative to camera view direction
		  {
			  MoveRelativeToCamera(cmd);
		  }
		  else if ((sidedownfacecam || fwddownfacecam) && !bIsInPain())
		  {
		    double fm, sm;
		    [fm, sm] = PlayerPawn(Owner).TweakSpeeds(cmd.forwardmove, cmd.sidemove);
		    sm *= Owner.Speed / 256.;
		    fm *= Owner.Speed / 256.;
		    if (PlayerPawn(Owner).CanCrouch() && player.crouchfactor != 1)
		    {
		      sm *= player.crouchfactor;
		      fm *= player.crouchfactor;
		    }
		    double friction, movefactor;
		    [friction, movefactor] = PlayerPawn(Owner).GetFriction();
		    if (!player.onground && !Owner.bNoGravity && !waterlevel) movefactor *= level.aircontrol;
		    sm *= 2.0 * movefactor * (35 / TICRATE); // Factor of 2.0 to negate default MovePlayer()
		    fm *= 2.0 * movefactor * (35 / TICRATE);
		    if (sm && sidedownfacecam)
		    {
		      let a = Owner.angle + 90.0;
		      Owner.Vel.X += sm * Cos(a);
		      Owner.Vel.Y += sm * Sin(a);
		    }
		  }

		  oldsidemove = cmd.sidemove;
		  oldforwardmove = cmd.forwardmove;
		}

		Super.Tick();
	}

	//===========================================================================
	//
	//
	//
	//===========================================================================
	States
	{
	Use:
		TNT1 A 0;
		Fail;
	Pickup:
		TNT1 A 0
		{
			return true;
		}
		Stop;
	}
}

class MoveTorch : Inventory
{
        // MoveTorch given to me by Madame Rachelle
        DynamicLight light;
	vector3 offs;
	
	default
	{
		Inventory.MaxAmount 1;
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNTOSSABLE
		+INVENTORY.AUTOACTIVATE
	}
	override void DoEffect()
	{
		Super.DoEffect();
		if (!light)
		{
			light = DynamicLight(Actor.Spawn("DynamicLight"));
			light.battenuate = true;
			light.bnoshadowmap = true;
			light.args[0] = 132;
			light.args[1] = 132;
			light.args[2] = 132;
			light.args[3] = 124;
			light.args[4] = 124;
			offs = (owner.radius*Cos(owner.angle), owner.radius*Sin(owner.angle), owner.player.viewheight);
		}
		if (light)
		{
			light.SetOrigin(owner.pos + offs, true);
			light.prev = owner.prev + offs;
			light.vel = owner.vel;
		}
	}

	override void OnDestroy()
	{
		if (light)
			light.Destroy();
		Super.OnDestroy();
	}
}
