class DoomPlayer2 : DoomPlayer
{
  Default
    {
      Player.DisplayName "Doomguy2";
	  Player.ViewBob 0;
	  Player.FlyBob 0;
      +NOSKIN
    }
	
	Override void Tick()
	{
		Super.Tick();
		
		Let Player = Self.Player;
		Let Weap = Player.Readyweapon;
		if(Player == Null || Weap == Null) { return; }
		
		Int slotid, indx, Number;
		Bool found;
		[found, slotid, indx] = Player.Weapons.LocateWeapon(Weap.GetClass());
		if (found) Number = slotid + 7 * indx; // This should probably be unrolled into switch cases
		else Number = 11;
		if (Number == 10) Number = 9; // Super Shotgun
		if(Number < 10) // Feel free to add more sprites for more weapons and increase this
		{
			// Don't forget to precache these sprites (see SpriteLoader class below)
			if(Player.CrouchFactor != 1)
			{
				CrouchSprite = GetSpriteIndex(String.Format("PL%dC", Number));
				Self.Sprite = CrouchSprite;
			}
			else
			{
				Self.Sprite = GetSpriteIndex(String.Format("PLA%d", Number));
			}
		}
		else // Use built-in default doomguy sprites
		{
			if(Player.CrouchFactor != 1)
			{
				CrouchSprite = GetSpriteIndex("PLYC");
				Self.Sprite = CrouchSprite;
			}
			else
			{
				Self.Sprite = GetSpriteIndex("PLAY");
			}
		}
	}
}

//If you do not place the sprites in a dummy actor the engines does not load them on boot
//and crashes when trying to draw them on screen
Class SpriteLoader : Actor
{
	States
	{
	Spawn:
		PLA1 ABCDEFGHIJKLMNOPQRSTUVW 0;
		PLA2 ABCDEFGHIJKLMNOPQRSTUVW 0;
		PLA3 ABCDEFGHIJKLMNOPQRSTUVW 0;
		PLA4 ABCDEFGHIJKLMNOPQRSTUVW 0;
		PLA5 ABCDEFGHIJKLMNOPQRSTUVW 0;
		PLA6 ABCDEFGHIJKLMNOPQRSTUVW 0;
		PLA7 ABCDEFGHIJKLMNOPQRSTUVW 0;
		PLA8 ABCDEFGHIJKLMNOPQRSTUVW 0;
		PLA9 ABCDEFGHIJKLMNOPQRSTUVW 0;
		
		PL1C ABCDEFGHIJKLMNOPQRSTUVW 0;
		PL2C ABCDEFGHIJKLMNOPQRSTUVW 0;
		PL3C ABCDEFGHIJKLMNOPQRSTUVW 0;
		PL4C ABCDEFGHIJKLMNOPQRSTUVW 0;
		PL5C ABCDEFGHIJKLMNOPQRSTUVW 0;
		PL6C ABCDEFGHIJKLMNOPQRSTUVW 0;
		PL7C ABCDEFGHIJKLMNOPQRSTUVW 0;
		PL8C ABCDEFGHIJKLMNOPQRSTUVW 0;
		PL9C ABCDEFGHIJKLMNOPQRSTUVW 0;
		Stop;
	}
}

class Swi : TechLamp
{
	bool lamp_on; //Used to track whether the lamp is on

	override bool Used (Actor user)
	{
		if (!lamp_on)
		{
			// Attach dynamic light, play a standard switch sound
			// and move to the LampOn state label:
			A_AttachLight('lamplight', DynamicLight.PulseLight, "DDDDFF", 96, 99, DYNAMICLIGHT.LF_ATTENUATE, (0,0,72), 0.4);
			A_StartSound("switches/normbutn");
			SetStateLabel("LampOn");
		}
		else
		{
			// Remove the light, play the sound, change states:
			A_RemoveLight('lamplight');
			A_StartSound("switches/normbutn");
			SetStateLabel("Spawn");
		}
		// flip the value of lamp_on:
		lamp_on = !lamp_on;
		return true;
	}

	States
	{
	Spawn:
		TLMP C -1;
		stop;
	LampOn:
		// This is how the regular TechLamp looks:
		TLMP ABCD 4 Bright;
		Loop;
	}
}
