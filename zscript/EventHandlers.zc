class CameraChangeHandler : CustomFloatCVar
{
  override double ModifyValue(Name CVarName, double val)
  {
    return clamp(val, 1.0, 89.0);
  }
}

class MKeyEvents : EventHandler 
{
  cvar isodist, isopitch, isoyaw, isoaim;
  override bool InputProcess (InputEvent e)
  {
    if (e.Type == InputEvent.Type_KeyDown)
	SendNetworkEvent("MYKEYDOWN", e.KeyScan);

    if (e.Type == InputEvent.Type_KeyUp)
	SendNetworkEvent("MYKEYUP", e.KeyScan);
    
    return false;
  }

  override void NetworkProcess(ConsoleEvent e)
  {			
    if (e.Name == "MYKEYDOWN")
      {
	int key1, key2;
	[key1, key2] = Bindings.GetKeysForCommand("rotate_cam_left");
	if ((key1 && key1 == e.Args[0]) || (key2 && key2 == e.Args[0]))
	  CVar.GetCVar("RotatingLeft", players[e.Player]).SetBool(true);
	else
	  {
	    [key1, key2] = Bindings.GetKeysForCommand("rotate_cam_right");
	    if ((key1 && key1 == e.Args[0]) || (key2 && key2 == e.Args[0]))
	      CVar.GetCVar("RotatingRight", players[e.Player]).SetBool(true);
	  }

	[key1, key2] = Bindings.GetKeysForCommand("iso_zoom_in");
	if ((key1 && key1 == e.Args[0]) || (key2 && key2 == e.Args[0]))
	  {
	    isodist = CVar.GetCVar("IsometricDist", players[e.Player]);
	    isodist.SetFloat(clamp(isodist.GetFloat()-10.0, 100.0, 500.0));
	    isoyaw = CVar.GetCVar("IsometricYaw", players[e.Player]);
	    isopitch = CVar.GetCVar("IsometricPitch", players[e.Player]);
	    if(players[e.Player].camera)
	      SpectatorCamera(players[e.Player].camera).Init(isodist.GetFloat(),
							     isoyaw.GetFloat(), isopitch.GetFloat(), -1);
	  }
	else
	  {
	    [key1, key2] = Bindings.GetKeysForCommand("iso_zoom_out");
	    if ((key1 && key1 == e.Args[0]) || (key2 && key2 == e.Args[0]))
	      {
		isodist = CVar.GetCVar("IsometricDist", players[e.Player]);
		isodist.SetFloat(clamp(isodist.GetFloat()+10.0, 100.0, 500.0));
		isoyaw = CVar.GetCVar("IsometricYaw", players[e.Player]);
		isopitch = CVar.GetCVar("IsometricPitch", players[e.Player]);
		if(players[e.Player].camera)
		  SpectatorCamera(players[e.Player].camera).Init(isodist.GetFloat(),
								 isoyaw.GetFloat(), isopitch.GetFloat(), -1);
	      }
	  }
	[key1, key2] = Bindings.GetKeysForCommand("iso_aim_assist");
	if ((key1 && key1 == e.Args[0]) || (key2 && key2 == e.Args[0]))
	  {
	    isoaim = CVar.GetCVar("IsoAimAssist", players[e.Player]);
	    isoaim.SetBool(!isoaim.GetBool());
	    if (isoaim.GetBool()) console.printf("Aim Assist Enabled");
	    else console.printf("Aim Assist Disabled");
	  }
      }
    else if (e.Name == "MYKEYUP")
      {
	int key1, key2;
	[key1, key2] = Bindings.GetKeysForCommand("rotate_cam_left");
	if ((key1 && key1 == e.Args[0]) || (key2 && key2 == e.Args[0]))
	  CVar.GetCVar("RotatingLeft", players[e.Player]).SetBool(false);
	else
	  {
	    [key1, key2] = Bindings.GetKeysForCommand("rotate_cam_right");
	    if ((key1 && key1 == e.Args[0]) || (key2 && key2 == e.Args[0]))
	      CVar.GetCVar("RotatingRight", players[e.Player]).SetBool(false);
	  }
      }
  }
}

class StartingInventoryHandler : EventHandler
{
	override void PlayerEntered(PlayerEvent e)
	{
	        players[e.PlayerNumber].mo.A_GiveInventory("Z_NashMove", 1);
		players[e.PlayerNumber].mo.A_GiveInventory("MoveTorch", 1);
		players[e.PlayerNumber].mo.A_GiveInventory("IsometricMovement", 1);
	}
}

//Camera actor for player's scope
class ScopeCamera : Actor
{
	playerpawn ppawn;
	default
	{
	  height 0;
	  radius 0;
	  +noclip
	  +nointeraction
	  +noblockmap
	}

	override void postbeginplay()
	{
	  super.postbeginplay();
	  ppawn=playerpawn(target);
	}

	override void tick()
	{
	  if(!ppawn)
	  {
	    destroy();
	    return;
	  }

	  A_SetAngle(ppawn.angle, SPF_INTERPOLATE);
	  A_SetPitch(ppawn.pitch, SPF_INTERPOLATE);
	  A_SetRoll(ppawn.roll);

	  SetOrigin(ppawn.pos + (ppawn.radius * Cos(ppawn.angle),
				 ppawn.radius * Sin(ppawn.angle),
				 0.25 * ppawn.height), true);
	}

	States
	{
	  Spawn:
	    TNT1 A -1 NoDelay;
	    Stop;
	}
}

class MyStaticEventHandler : StaticEventHandler
{
  override void PlayerSpawned(playerEvent e)
  {
    // Add a scope camera to each player, and store it in player.mo.tracer
    players[e.PlayerNumber].mo.tracer = Actor.Spawn("ScopeCamera", players[e.PlayerNumber].mo.pos, ALLOW_REPLACE);
    players[e.PlayerNumber].mo.tracer.target = players[e.PlayerNumber].mo;
    // When the player spawns, spawn an isometric spectator camera:
    players[e.PlayerNumber].camera = SpectatorCamera(Actor.Spawn("SpectatorCamera", players[e.PlayerNumber].mo.pos));
    players[e.PlayerNumber].camera.tracer = players[e.PlayerNumber].mo; // This makes camera follow the player
    players[e.PlayerNumber].mo.tracer.tracer = players[e.PlayerNumber].camera; // Storage for retrieval in case player.camera gets changed
    int camflags = VPSF_ABSOLUTEOFFSET | VPSF_ALLOWOUTOFBOUNDS | VPSF_ORTHOGRAPHIC;
    CVar isodist = CVar.GetCVar("IsometricDist", players[e.PlayerNumber]);
    CVar isoyaw = CVar.GetCVar("IsometricYaw", players[e.PlayerNumber]);
    CVar isopitch = CVar.GetCVar("IsometricPitch", players[e.PlayerNumber]);
    SpectatorCamera(players[e.PlayerNumber].camera).Init(isodist.GetFloat(), isoyaw.GetFloat(), isopitch.GetFloat(), camflags);
    // The following has to come after Init
    // SpectatorCamera(players[e.PlayerNumber].camera).lagdistance = 150.0; // Use for a lazy camera that only follows if you get away from center
    // SpectatorCamera(players[e.PlayerNumber].camera).chasemode = 2; // 0: chase until tracer centered, 1: same but only when tracer is moving, 2: stop chase if tracer within lagdistance
  }

  override void PlayerDisconnected (PlayerEvent e)
  {
    // This is needed if a player disconnects from a multiplayer session
    if(players[e.PlayerNumber].camera) players[e.PlayerNumber].camera.destroy();
  }

  override void WorldLoaded (WorldEvent e)
  {
    for (int i = 0; i < MAXPLAYERS; i++)
      {
	if (PlayerInGame[i] && players[i].mo)
	  {
	    // Add a scope camera to each player, and store it in player.mo.tracer
	    players[i].mo.tracer = Actor.Spawn("ScopeCamera", players[i].mo.pos, ALLOW_REPLACE);
	    players[i].mo.tracer.target = players[i].mo;
	    // When World loads, spawn an isometric spectator camera:
	    players[i].camera = SpectatorCamera(Actor.Spawn("SpectatorCamera", players[i].mo.pos));
	    players[i].camera.tracer = players[i].mo; // This makes camera follow the player
	    players[i].mo.tracer.tracer = players[i].camera; // Storage for retrieval in case player.camera gets changed
	    int camflags = VPSF_ABSOLUTEOFFSET | VPSF_ALLOWOUTOFBOUNDS | VPSF_ORTHOGRAPHIC;
	    CVar isodist = CVar.GetCVar("IsometricDist", players[i]);
	    CVar isoyaw = CVar.GetCVar("IsometricYaw", players[i]);
	    CVar isopitch = CVar.GetCVar("IsometricPitch", players[i]);
	    SpectatorCamera(players[i].camera).Init(isodist.GetFloat(), isoyaw.GetFloat(), isopitch.GetFloat(), camflags);
	    // The following has to come after Init
	    // SpectatorCamera(players[i].camera).lagdistance = 150.0; // Use for a lazy camera that only follows if you get away from center
	    // SpectatorCamera(players[i].camera).chasemode = 2; // 0: chase until tracer centered, 1: same but only when tracer is moving, 2: stop chase if tracer within lagdistance
	  }
      }
  }

  override void WorldTick()
  {
    for (int i = 0; i < MAXPLAYERS; i++)
      {
	if (PlayerInGame[i] && players[i].mo)
	  {
	    if ((!players[i].camera || (players[i].camera == players[i].mo)) && players[i].mo.tracer && players[i].mo.tracer.tracer)
	    {
	      // player.camera was reset for some reason
	      // Retreive from storage
	      players[i].camera = players[i].mo.tracer.tracer;
	    }
	    if (players[i].camera)
	    {
	      Bool rotateleft = CVar.GetCVar("RotatingLeft", players[i]).GetBool();
	      Bool rotateright = CVar.GetCVar("RotatingRight", players[i]).GetBool();
	      if (rotateleft || rotateright)
		{
		  CVar isodist = CVar.GetCVar("IsometricDist", players[i]);
		  CVar isoyaw = CVar.GetCVar("IsometricYaw", players[i]);
		  CVar isopitch = CVar.GetCVar("IsometricPitch", players[i]);
		  CVar isospeed = CVar.GetCVar("IsometricSpeed", players[i]);
		  isoyaw.SetFloat(isoyaw.GetFloat() + (rotateright ? 1 : -1) * isospeed.GetFloat());
		  int camflags = VPSF_ABSOLUTEOFFSET | VPSF_ALLOWOUTOFBOUNDS | VPSF_ORTHOGRAPHIC;
		  SpectatorCamera(players[i].camera).Init(isodist.GetFloat(), isoyaw.GetFloat(), isopitch.GetFloat(), camflags);
	      }
	    }
	  }
      }
  }
}

class RenderCursorsOverlay : EventHandler
{
        cvar isoyaw, isopitch, isoaimdist;
	cvar showwep, showscope, showscopehealth;
	cvar wepsize, wepxpos, wepypos;
	cvar scopesize, scopexpos, scopeypos;
	FLineTraceData t[MAXPLAYERS];
	Vector3 hitloc;
	Actor actorhit[MAXPLAYERS];

	// getActorMaxHealth(), makeHpBar(), and makeRepeating() functions
	// are derived from similar functions defined in the Target-Spy mod
	// by Author m8f: https://github.com/mmaulwurff/target-spy
	// The Target-Spy mod as released under the GPLv3 license, and a
	// copy of said license is included in the root directory as
	// GPLv3.txt

	ui static int getActorMaxHealth(Actor a)
	{
	  if (a == NULL) { return 0; }

	  if (a.player && a.player.mo) { return a.player.mo.getMaxHealth(); }

	  int maxHealth = a.spawnHealth();

	  return maxHealth;
	}

        ui static string makeHpBar(int health, int maxHealth, bool logScale = false)
	{	  
	  bool greenRedTheme = true;
	  int greenColor = 3;
	  int redColor = 6;
	  string pip = "|";
	  string emptyPip = "-";
	  double lengthMultiplier = 1.0;
    
	  int length;
	  if (logScale)               { length = int(Log(maxHealth)) * 2; }
	  else if (maxHealth >= 2000) { length = 30; }
	  else if (maxHealth >= 500)  { length = 20; }
	  else                        { length = 10; }

	  length = int(round(length * lengthMultiplier));

	  int nPips;
	  if (maxHealth < 1)
	  {
	    nPips = 0;
	  }
	  else
	  {
	    nPips = int(round(double(health) * length / maxHealth));
	    nPips = clamp(nPips, 0, length);
	  }

	  string pipColor;
	  string emptyColor;
	  if (greenRedTheme)
	  {
	    pipColor   = String.Format("\c%c", 97 + greenColor); // 'a'
	    emptyColor = String.Format("\c%c", 97 + redColor);   // 'a'
	  }
	  else
	  {
	    pipColor   = "";
	    emptyColor = "";
	  }

	  return String.Format( "%s%s%s%s"
				, pipColor
				, MakeRepeating(pip, nPips)
				, emptyColor
				, MakeRepeating(emptyPip, length - nPips)
				);

	}

	ui static string makeRepeating(string s, int n)
	{
	  if (n == 0) { return ""; }
	  string format = string.format("%%%ds", n);
	  string result = string.format(format, " ");
	  result.replace(" ", s);
	  return result;
	}
	
	override void OnRegister()
	{
	  isoyaw = CVar.GetCVar("IsometricYaw", players[consoleplayer]);
	  isopitch = CVar.GetCVar("IsometricPitch", players[consoleplayer]);
	  isoaimdist = CVar.GetCVar("IsoAimAssistMaxDist", players[consoleplayer]);
	  showwep = CVar.GetCVar("IsoHUDShowWeapon", players[consoleplayer]);
	  showscope = CVar.GetCVar("IsoHUDShowTarget", players[consoleplayer]);
	  showscopehealth = CVar.GetCVar("IsoHUDShowTargetHealth", players[consoleplayer]);
	  wepsize = CVar.GetCVar("IsoHUDWeaponSize", players[consoleplayer]);
	  wepxpos = CVar.GetCVar("IsoHUDWeaponXPos", players[consoleplayer]);
	  wepypos = CVar.GetCVar("IsoHUDWeaponYPos", players[consoleplayer]);
	  scopesize = CVar.GetCVar("IsoHUDTargetSize", players[consoleplayer]);
	  scopexpos = CVar.GetCVar("IsoHUDTargetXPos", players[consoleplayer]);
	  scopeypos = CVar.GetCVar("IsoHUDTargetYPos", players[consoleplayer]);
	  hitloc = (0, 0, 0);
	  for (int i = 0; i < MAXPLAYERS; i++)
	  {
	    actorhit[i] = NULL; // false;
	  }
	}

	override void WorldTick()
	{
	  for (int i = 0; i < MAXPLAYERS; i++)
	  {
	    if (PlayerInGame[i] && players[i].mo)
	    {
	      PlayerPawn pmo = players[i].mo;
	      float max_dist = CVar.GetCVar("IsoAimAssistMaxDist", players[consoleplayer]).GetFloat();
	      if (pmo.LineTrace(pmo.angle, max_dist, pmo.pitch, TRF_NOSKY, pmo.viewheight*pmo.player.crouchfactor, data:t[i]))
	      {
		if ((t[i].HitType == TRACE_HitActor) && t[i].hitActor.bISMONSTER && !t[i].hitActor.bFRIENDLY && !t[i].hitActor.bCORPSE)
		  actorhit[i] = t[i].HitActor; // true;
		else
		  actorhit[i] = NULL; // false;
	      }
	      else
		actorhit[i] = NULL; // false;
	    }
	  }
	}
	
	override void RenderOverlay(RenderEvent e)
	{
	  if (!automapactive && (gamestate == GS_LEVEL)) // level.mapName != "TITLEMAP")
	  {
	    PlayerPawn pmo = players[consoleplayer].mo;
	    float pang = pmo.angle;
	    float cyaw = isoyaw.GetFloat();
	    float cpit = isopitch.GetFloat();
	    float max_dist = isoaimdist.GetFloat();
	    
	    StatusBar.BeginHUD();

	    if(showwep.GetBool())
	    {
	      int wsize = clamp(wepsize.GetInt(), 1, 100);
	      int wxpos = (int)(400*clamp(wepxpos.GetFloat(), -1.0, 1.0));
	      int wypos = (int)(-400*clamp(wepypos.GetFloat(), 0.0, 1.0));
	      StatusBar.DrawInventoryIcon(players[consoleplayer].readyweapon, (wxpos, wypos),
					  StatusBar.DI_SCREEN_CENTER_BOTTOM | StatusBar.DI_ITEM_CENTER,
					  1.0, (2*wsize, wsize), (0.03*wsize, 0.03*wsize)); // alpha, boxsize, scale
	    }

	    int cursordist = 75;
	    float diffangle = pmo.deltaangle(pang, cyaw);
	    int cosine = (int)(-0.5*cursordist*Cos(diffangle));
	    int sine = (int)(cursordist*Sin(diffangle));
	    if(players[consoleplayer].camera && players[consoleplayer].camera.tracer)
	    {
	      if(players[consoleplayer].camera.ViewPos && (players[consoleplayer].camera.ViewPos.Flags & VPSF_ORTHOGRAPHIC))
	      { // If using orthographic projection
		Vector3 playerdisp = players[consoleplayer].camera.tracer.pos - players[consoleplayer].camera.pos;
		diffangle = pmo.deltaangle(playerdisp.Angle(), cyaw);
		// Translate game/map (x, y, z) position into screen (x, y) location
		double xproj = 320/players[consoleplayer].camera.ViewPos.offset.length();
		double yproj = Sin(cpit)*xproj;
		double zproj = Cos(cpit)*xproj;
		cosine -= (int)(playerdisp.xy.length()*Cos(diffangle)*yproj);
		cosine -= (int)(playerdisp.z*zproj);
		// cosine -= (int)(players[consoleplayer].camera.tracer.height*0.5*zproj);
		sine += (int)(playerdisp.xy.length()*Sin(diffangle)*xproj);
	      } // else use libEye to locate camera.tracer's screen coordinates
	    }

	    if (CVar.GetCVar("IsoAimAssist", players[consoleplayer]).GetBool())
	    {
	      StatusBar.DrawImage("sprites/aim_hair.png", (sine, cosine),
				  StatusBar.DI_SCREEN_CENTER | StatusBar.DI_ITEM_CENTER, scale: (1.2, 1.2));
	    } else {
	      StatusBar.DrawImage("sprites/dir_hair.png", (sine, cosine),
				  StatusBar.DI_SCREEN_CENTER | StatusBar.DI_ITEM_CENTER, scale: (0.75, 0.75));
	    }

	    if (actorhit[consoleplayer])
	    {
	      int cosine2 = 0;
	      int sine2 = 0;
	      if(players[consoleplayer].camera && players[consoleplayer].camera.ViewPos && (players[consoleplayer].camera.ViewPos.Flags & VPSF_ORTHOGRAPHIC))
	      { // If using orthographic projection
		Vector3 tardisp = actorhit[consoleplayer].pos - players[consoleplayer].camera.pos;
		diffangle = pmo.deltaangle(tardisp.Angle(), cyaw);
		// Translate game/map (x, y, z) position into screen (x, y) location
		double xprj = 320/players[consoleplayer].camera.ViewPos.offset.length();
		double yprj = Sin(cpit)*xprj;
		double zprj = Cos(cpit)*xprj;
		cosine2 -= (int)(tardisp.xy.length()*Cos(diffangle)*yprj);
		cosine2 -= (int)(tardisp.z*zprj);
		sine2 += (int)(tardisp.xy.length()*Sin(diffangle)*xprj);
	      } // else use libEye to locate camera.tracer's screen coordinates
	      cosine -= (int)(-0.25*cursordist*Cos(diffangle));
	      sine -= (int)(0.5*cursordist*Sin(diffangle));	      
	      int halfw = (int)(Screen.GetWidth()/2);
	      int halfh = (int)(Screen.GetHeight()/2);
	      Screen.DrawLine(2*sine+halfw, 2*cosine+halfh, 2*sine2+halfw, 2*cosine2+halfh, Color(0xFF, 0xFF, 0x00, 0xFF)); // Why 2?!
	      StatusBar.DrawImage("sprites/tar_hair.png", (sine2, cosine2),
				  StatusBar.DI_SCREEN_CENTER | StatusBar.DI_ITEM_CENTER, scale: (0.75, 0.75));

	      if(showscope.GetBool())
	      {
		double tardist = (actorhit[consoleplayer].pos - players[consoleplayer].camera.pos).length();
		tardist -= (actorhit[consoleplayer].radius + pmo.radius);
		double degree = 57.2957795 * actorhit[consoleplayer].height / (tardist > 0.0 ? tardist: 1.0); // in degrees
		texman.setcameratotexture(players[consoleplayer].mo.tracer, "CAMTEX_1", degree);

		float ssize = 0.02*clamp(scopesize.GetInt(), 1, 100);
		int sxpos = (int)(400*clamp(scopexpos.GetFloat(), -1.0, 1.0));
		int sypos = (int)(-400*clamp(scopeypos.GetFloat(), 0.0, 1.0));
		StatusBar.DrawImage("CAMTEX_1", (sxpos, sypos),
				    StatusBar.DI_SCREEN_CENTER_BOTTOM | StatusBar.DI_ITEM_CENTER,
				    scale: (ssize, ssize));
		StatusBar.DrawImage("sprites/scope_sight.png", (sxpos, sypos),
				    StatusBar.DI_SCREEN_CENTER_BOTTOM | StatusBar.DI_ITEM_CENTER,
				    scale: (0.8*ssize, 0.8*ssize));

		if(showscopehealth.GetBool())
		{
		  string hpBar = makeHpBar(actorhit[consoleplayer].health,
					   getActorMaxHealth(actorhit[consoleplayer]));
		  HUDFont monospaceSmallfont = HUDFont.Create(smallfont, smallfont.GetCharWidth("0"), true);
		  StatusBar.DrawString(monospaceSmallfont, hpBar, (sxpos-(int)(30*ssize), sypos-(int)(40*ssize)),
				       StatusBar.DI_SCREEN_CENTER_BOTTOM | StatusBar.DI_ITEM_CENTER,
				       scale: (0.8*ssize, 0.8*ssize));
		}
	      }
	    }
	  }
	}
}

class IsoAimAssistHandler : StaticEventHandler
{
        // copying RicardoLuis0's Aim Assist Mod v0.8
	// https://forum.zdoom.org/viewtopic.php?t=62895
        FLineTraceData tarray[MAXPLAYERS];

	// do linetrace and get results
	play Actor,double,Vector3 doTrace(PlayerPawn a,double i_angle,double i_rotation,Actor closest,double closest_distance, double max_dist){
		FLineTraceData t;
		Vector3 hitloc=(0,0,0);
		//do a linetrace around i_a and i_r in a circle
		if(a.LineTrace(a.angle+(sin(i_rotation)*i_angle),			//trace angle
							max_dist,							//trace max distance
							a.pitch+(cos(i_rotation)*i_angle*8),		//trace pitch (modified by factor 8)
							TRF_NOSKY,								//trace flags
							a.viewheight*a.player.crouchfactor,		//trace height
							data:t									//output struct
		)){
			if(t.hitType==TRACE_HitActor){//if hit is an actor
				
				if(t.hitActor.bISMONSTER&&!t.hitActor.bFRIENDLY&&!t.hitActor.bCORPSE){//if hit is a monster and not friendly
					if(!closest||a.Distance3D(t.HitActor)>closest_distance){//if it's closer than last hit
						//change this as new closest
						closest=t.HitActor;
						closest_distance=a.Distance3D(t.HitActor);
						hitloc=t.HitLocation;
					}
				}
			}
		}
		return closest,closest_distance,hitloc;
	}

	//get angle and delta from two positions
	static vector3, double, double lookAt(Vector3 pos1, Vector3 pos2){
		//calculate difference between pos1 and pos2 (level.Vec3Diff takes portals into account)
		
		Vector3 delta=level.Vec3Diff(pos1, pos2);
		
		//calculate angle and pitch to other actor
		double target_angle = atan2(delta.y, delta.x);
		double target_pitch = -asin(delta.z/delta.length());

		return delta, target_angle, target_pitch;
	}

	//main method, does all work
	bool doAim(int pnum)
	{
		PlayerPawn pawn = players[pnum].mo;
		Actor closest = null;
		Actor hit = null;
		Vector3 hitloc = (0, 0, 0);
		cvar aimassist = CVar.GetCVar("IsoAimAssist", players[pnum]);
		float max_dist = CVar.GetCVar("IsoAimAssistMaxDist", players[pnum]).GetFloat();
		float closest_distance = max_dist + 1;
		
		//check straight ahead
		[closest, closest_distance, hitloc] = doTrace(pawn, 0, 0, closest, closest_distance, max_dist);

		// Convert these to CVars?
		double precision = 0.5;
		double radial_precision = 8;
		double max_angle = 8;

		//check in a circle around the direction player's looking
		for(double i_a = 0; i_a <= max_angle; i_a += precision) {
			for(double i_r = 0; i_r <= 360 && !closest; i_r += radial_precision) {
			  [closest, closest_distance, hitloc] = doTrace(pawn, i_a, i_r, closest, closest_distance, max_dist);
			}
		}

		//if there was an enemy found
		if(closest){
		  float pheight = pawn.viewheight*pawn.player.crouchfactor;
		  Vector3 aimheight=(0, 0, closest.height);
		  Vector3 delta;
		  double target_angle,target_pitch;
		  Vector3 view=pawn.pos + (0, 0, pheight);
		  //get target angle and pitch
		  [delta, target_angle, target_pitch] = lookAt(view, closest.pos + aimheight);
			
		  //check if view is obstructed
		  FLineTraceData t;
		  pawn.LineTrace(target_angle, max_dist, target_pitch,
				 TRF_NOSKY, pawn.viewheight*pawn.player.crouchfactor, data:t);
		  //aim correction
		  if((t.hitType != TRACE_HitActor) || (t.hitActor != closest)){
		    //try to aim at correct z
		    [delta, target_angle, target_pitch] = lookAt(view, (hitloc.x, hitloc.y, closest.pos.z + aimheight.z));
		    pawn.LineTrace(target_angle, max_dist, target_pitch, TRF_NOSKY, pawn.viewheight * pawn.player.crouchfactor, data:t);
		  }
		  if((t.hitType != TRACE_HitActor) || (t.hitActor != closest)){
		    //try to aim at correct xy
		    [delta, target_angle, target_pitch] = lookAt(view, (closest.pos.x, closest.pos.y, hitloc.z));
		    pawn.LineTrace(target_angle, max_dist, target_pitch, TRF_NOSKY, pawn.viewheight * pawn.player.crouchfactor, data:t);
		  }
		  /* if((t.hitType != TRACE_HitActor) || (t.hitActor != closest)){ */
		  /*   // target closest */
		  /*   [delta, target_angle, target_pitch] = lookAt(view, hitloc); */
		  /* } */
		  if((t.hitType != TRACE_HitActor) || (t.hitActor != closest)){
		    // Stop aiming
		    return false;
		  }

		  //get angle difference
		  double angle_diff = pawn.DeltaAngle(pawn.angle, target_angle);
		  double pitch_diff = pawn.DeltaAngle(pawn.pitch, target_pitch);

		  double rot_speed = 1;
		  if (aimassist.GetBool())
		  {
		    //check rotation speed
		    if(abs(angle_diff) > rot_speed){
		      //if rotation speed is lower than difference, add/subtract rotation speed
		      pawn.A_SetAngle(pawn.angle + (angle_diff > 0 ? rot_speed : -rot_speed), SPF_INTERPOLATE);
		    } else {
		      //if rotation speed is higher than differece, set to target angle
		      pawn.A_SetAngle(target_angle, SPF_INTERPOLATE);
		    }
		  }
		  
		  if(abs(pitch_diff) > rot_speed){
		    //if rotation speed is lower than difference, add/subtract rotation speed
		    pawn.A_SetPitch(pawn.pitch + (pitch_diff > 0 ? rot_speed : -rot_speed), SPF_INTERPOLATE);
		  } else {
		    //if rotation speed is higher than differece, set to target pitch
		    pawn.A_SetPitch(target_pitch, SPF_INTERPOLATE);
		  }
		  return true;
		} else {
		  return false;
		}
	}

	override void WorldTick()
	{
	  for (int i = 0; i < MAXPLAYERS; i++)
	  {
	    if (PlayerInGame[i] && players[i].mo)
	    {
	      if (!doAim(i)) players[i].mo.A_SetPitch(0);
	    }
	  }
	}

}

// Taken from a demo meant for the D4D team.
// I can't track down who to credit here.
// Is it MajorCooke?
// Slightly modified to take camera angle into account.
Class D4DHandler : EventHandler
{
	override void OnRegister()
	{
		SetOrder(666);
		Super.OnRegister();
	}
	
	override void WorldLoaded(WorldEvent e)
	{
		ArrowManager = D4VisualDamageManager.Create();
	}
	
	override void RenderOverlay(RenderEvent e)
	{
		RenderDamageIndicators(e);
	}
	
	override void WorldTick()
	{
		TickDamageIndicators();
	}
	
	override void WorldThingDamaged(WorldEvent e)
	{
		Actor damaged =	e.Thing;
		
		if (damaged.player)
		{
			Actor	src = e.DamageSource,
					inf = e.Inflictor;
			
			if (!src && !inf)
				return;
			
			AddEventDamageIndicator(e);
		}
	
	}
	
	
	
	private D4VisualDamageManager ArrowManager;
	private ui void RenderDamageIndicators(RenderEvent e)
	{
		if (ArrowManager)
			ArrowManager.Render(e);
	}
	
	private void TickDamageIndicators()
	{
		if (ArrowManager)
			ArrowManager.Tick();
	}
	
	private void AddEventDamageIndicator(WorldEvent e)
	{
		if (ArrowManager)
			ArrowManager.AddIndicator(e.DamageSource, e.Inflictor, e.Thing, e.Damage);
	}
	
	void AddDamageIndicator(Actor src, Actor inf, Actor plr, int damage)
	{
		if (ArrowManager)
		{
			ArrowManager.AddIndicator(src, inf, plr, damage);
		}
	}
}

//==============================================================================
// Damage Indicators
//==============================================================================

Class D4VisualDamageManager play
{
	private Array<D4DamageIndicator> Arrows;
	private int Timer;
	const ClearTimer = 5 * 5;
	
	static D4VisualDamageManager Create()
	{
		let vdm = new('D4VisualDamageManager');
		vdm.Init();
		return vdm;
	}
	
	protected void Init()
	{
		Arrows.Clear();
	}
	
	void AddIndicator(Actor src, Actor inf, Actor plr, int damage = 0)
	{
		if ((!src && !inf) || !plr || src == plr)
			return;
		
		for (int i = 0; i < Arrows.Size(); i++)
		{
			if (Arrows[i] && Arrows[i].src == src)
			{
				Arrows[i].ResetTimer();
			//	Console.Printf("Updated arrow.");
				return;
			}
		}
		
		let arrow = new('D4DamageIndicator');
		arrow.src = src;
		arrow.inf = inf;
		if (src)	arrow.srcpos = src.pos;
		else if ((inf && inf.bMISSILE && inf.target) || inf)
		{
			src = (inf.target) ? inf.target : inf;
			arrow.srcpos = src.pos;
		}
		if (inf)	arrow.infpos = inf.pos;
		arrow.plr = plr;
		arrow.tex = TexMan.CheckForTexture(D4DamageIndicator.texname,TexMan.Type_Any);
		arrow.ResetTimer();
		arrow.Init();
		Arrows.Push(arrow);
	}
	
	void Tick()
	{
		int size = Arrows.Size();
		if (size < 1)	return;
		
		// Tick all the arrows and keep their information up to date.
		for (int i = 0; i < size; i++)
		{
			if (Arrows[i])
				Arrows[i].Tick();
		}
		
		// Memory management. Remove all empty slots.
		if (++Timer >= ClearTimer)
		{
			Timer = 0;
			Array<D4DamageIndicator> temp; temp.Clear();
			
			for (int i = 0; i < size; i++)
				if (Arrows[i])	temp.Push(Arrows[i]);
			
			Arrows.Move(temp);
		}
	}
	
	ui void Render(RenderEvent e)
	{
		if (Arrows.Size() < 1)
			return;
		
		PlayerInfo plr = players[consoleplayer];
		let CDIAlpha = Cvar.GetCvar('D4D_DIAlpha', plr);
		let CDIScale = Cvar.GetCvar('D4D_DIScale', plr);
		double Alpha = 1.0, Scale = 0.5;
		
		if (CDIAlpha)	Alpha = CDIAlpha.GetFloat();
		if (CDIScale)	Scale = CDIScale.GetFloat();
		
		int size = Arrows.Size();
		for (int i = 0; i < size; i++)
		{
			let arrow = D4DamageIndicator(Arrows[i]);
			if (arrow && arrow.pinfo == plr)
				Arrows[i].Render(e, Alpha, Scale);
		}
	}
}

Class D4DamageIndicator play
{
	const texname = "sprites/DmgDir2.png";
	Actor inf, src, plr;
	PlayerInfo pinfo;
	Vector3 infpos, srcpos;
	TextureID tex;
	private double Alpha, Scale;
	private int Timer;
	
	private bool hadsrc, hadinf;
	private Vector2 siz;
	private Shape2D flat;
	private Shape2DTransform trans;
	
	void Init()
	{
		hadsrc = src != null;
		hadinf = inf != null;
		pinfo = plr.player;
		flat = new("Shape2D");
		
		// simple coords
		flat.PushCoord((0,0));	// 0
		flat.PushCoord((1,0));	// 1
		flat.PushCoord((0,1));	// 2
		flat.PushCoord((1,1));	// 3
		
		// PushTriangle takes INDEXES of coords pushed to it in order from
		// first to last, as numbered above.
		flat.PushTriangle(0,2,1); // (0,0) (0,1) (1,0)
		flat.PushTriangle(2,3,1); // (0,1) (1,1) (1,0)
		siz = TexMan.GetScaledSize(tex);
		
		// Create the vertices and push them into the array.
		Vector2 vertices[4];
		vertices[0] = (-siz.x,-siz.y);
		vertices[1] = ( siz.x,-siz.y);
		vertices[2] = (-siz.x, siz.y);
		vertices[3] = ( siz.x, siz.y);
		
		flat.Clear(Shape2D.C_Verts);
		for ( int i=0; i<4; i++ ) flat.PushVertex(vertices[i]);
		
		trans = new('Shape2DTransform');
	}
	
	void ResetTimer(int time = -1)
	{
		if (time < 1)	time = (5 * 5);
		Timer = time;
	}
	
	void Tick()
	{
		if (--Timer < 0 || !plr)
		{
		//	Console.Printf("Destroyed");
			Destroy();	return;	
		}
		
		if (!src && inf && inf.bMISSILE)
			src = inf.target;
		
		if (src)	srcpos = src.pos;
		if (inf)	infpos = inf.pos;
		
	}
	const ThirtyFifth = (1.0 / 35.0);
	ui void Render( RenderEvent e, double _Alpha, double _Scale)
	{	
		// Alpha is already clamped below.
		double Alpha = (ThirtyFifth * Timer) * _Alpha;
		double Scale = _Scale;
		
		if (bDESTROYED || Alpha <= 0.0 || !plr || plr.pos == srcpos || !hadsrc)
			return;
		
		// Grab the player preferences.
		trans.Clear();
		
		// Rotate the damage indicator towards the one responsible.
		Vector3 diff = level.Vec3Diff(srcpos, plr.pos);
		double ang = VectorAngle(diff.X, diff.Y);
		if (pinfo.camera) ang = -plr.DeltaAngle(pinfo.camera.angle, ang);
		else ang = -plr.DeltaAngle(plr.angle, ang);

		Vector2 s = (Screen.GetWidth() / 2, Screen.GetHeight() / 2);
		
		double off = (siz.y + (siz.y * Scale)) * 0.75;
		Vector2 add = (-sin(ang) * off, cos(ang) * off);
		s += add;
		
		trans.Scale((1, 1) * Scale);
		trans.Rotate(ang + 180.0);
		trans.Translate(s);
		
		flat.SetTransform(trans);
		
			
		// draw the shape
		Screen.DrawShape(tex,false,flat,DTA_Alpha, Clamp(Alpha, 0.0, 1.0));
		
	}
}
